name: Reusable Fork Docker CI

on:
  workflow_call:
    inputs:
      registry-internal:
        description: "Address of the internal image registry to push images to"
        type: string
        required: true
      service-account-username:
        description: "Name of the GH service account to push changes and open PRs"
        type: string
        required: true
      service-account-email:
        description: "E-mail, associated with the GH service account"
        type: string
        required: true
      # Docker images parameters
      components:
        description: "List of components that require image build and version update. Should be a json list of the format: [{'name': 'componentA', 'imageName': 'imageA', 'dockerfile': 'Dockerfile'}]"
        type: string
        required: true
      # Helm chart parameters
      chart-name:
        description: "Name used in network-operator for this chart"
        type: string
        required: false
      chart-path:
        description: "Path to chart files in the caller repo"
        type: string
        required: false
      exclude-chart-files:
        description: 'List of relative paths to exclude from updating in the network-operator. Should be a json list: ["Chart.yaml", "some-subfolder/file-to-exclude.yaml"]'
        type: string
        required: false
      # Testing parameters
      ref-name:
        description: "Name of the git ref to use if github object is not available"
        type: string
        required: false
      ref-type:
        description: "Type of the git ref to use if github object is not available"
        type: string
        required: false
      network-operator-repo:
        description: "Network Operator repo url, can be used in tests"
        type: string
        required: false
    secrets:
      registry-username:
        description: "Credentials for the container registry"
        required: true
      registry-token:
        description: "Auth token for the container registry"
        required: true
      cicd-gh-token:
        description: "Github auth token with permissions to create pull requests in the network-operator repo"
        required: true
      goproxy:
        description: "GOPROXY url for go modules"
        required: false
    outputs:
      docker-tag:
        description: "Docker tag used to build images"
        value: ${{ jobs.determine_docker_registry_and_tag.outputs.docker_tag }}

jobs:
  determine_ref:
    runs-on: ubuntu-latest
    steps:
      - run: |
    outputs:
      github_ref_name: ${{ inputs.ref-name || github.ref_name }}
      github_ref_type: ${{ inputs.ref-type || github.ref_type }}
  determine_docker_registry_and_tag:
    needs: determine_ref
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .
      - if: needs.determine_ref.outputs.github_ref_type == 'branch'
        name: Determine docker registry and tag (when git branch)
        run: |
          echo DOCKER_REGISTRY=${{ inputs.registry-internal }} | tee -a $GITHUB_ENV
          echo DOCKER_TAG=$(git rev-parse --short HEAD) | tee -a $GITHUB_ENV  # short git commit hash
      - if: needs.determine_ref.outputs.github_ref_type == 'tag'
        name: Determine docker registry and tag (when git tag)
        run: |
          echo DOCKER_REGISTRY=${{ inputs.registry-internal }} | tee -a $GITHUB_ENV
          echo DOCKER_TAG=${{ needs.determine_ref.outputs.github_ref_name }} | tee -a $GITHUB_ENV
      - name: Store docker registry and tag for following jobs
        id: store-docker-registry-and-tag
        run: |
          echo DOCKER_REGISTRY=$DOCKER_REGISTRY >> $GITHUB_OUTPUT
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_OUTPUT
    outputs:
      docker_registry: ${{ steps.store-docker-registry-and-tag.outputs.DOCKER_REGISTRY }}
      docker_tag: ${{ steps.store-docker-registry-and-tag.outputs.DOCKER_TAG }}

  build_and_push_images:
    needs:
      - determine_ref
      - determine_docker_registry_and_tag
    runs-on: linux-amd64-cpu4
    env:
      BUILD_PLATFORMS: linux/amd64,linux/arm64
      DOCKER_REGISTRY: ${{ needs.determine_docker_registry_and_tag.outputs.docker_registry }}
      DOCKER_TAG: ${{ needs.determine_docker_registry_and_tag.outputs.docker_tag }}
      GOPROXY: ${{ secrets.goproxy || 'direct' }}
      BASE_IMAGE_DOCA_FULL_RT_HOST: nvcr.io/nvidia/doca/doca:3.0.0-full-rt-host
      BASE_IMAGE_GO_DISTROLESS_DEV: nvcr.io/nvidia/distroless/go:v3.1.12-dev
      BASE_IMAGE_GO_DISTROLESS: nvcr.io/nvidia/distroless/go:v3.1.12
    strategy:
      matrix:
        component: ${{ fromJSON(inputs.components) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine_ref.outputs.github_ref_name }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/buildkit/buildkitd.toml
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-token }}
      - uses: docker/build-push-action@v4
        with:
          platforms: ${{ env.BUILD_PLATFORMS }}
          context: .
          file: ${{ matrix.component.dockerfile }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ matrix.component.imageName }}:${{ env.DOCKER_TAG }}
          push: true
